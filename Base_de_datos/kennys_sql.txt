-- 1. Tablas que dependen de las anteriores

CREATE TABLE usuario(
    id_usuario INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_rol VARCHAR(50) NOT NULL,
    nombres VARCHAR(50) NOT NULL,
    apellidos VARCHAR(50) NOT NULL,
    correo VARCHAR(100) NOT NULL UNIQUE,
    contraseña VARCHAR(255) NOT NULL,
    telefono VARCHAR(20) NOT NULL,
    documento INT NOT NULL,
    reset_token VARCHAR(255) NULL,
    reset_token_expires_at DATETIME NULL

);

-- 2. Producto

CREATE TABLE producto (
    id_producto INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    categoria VARCHAR(50) NOT NULL,
    imagen VARCHAR(255) NOT NULL,
    precio_unitario DECIMAL(10, 2) NOT NULL,
    id_usuario INT NOT NULL,

    CONSTRAINT fk_id_usuario_producto
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- 3. Platillo

CREATE TABLE platillo(
    id_pla INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion VARCHAR(500) NOT NULL,
    precio DECIMAL (10, 2) NOT NULL,
    pla_categoria VARCHAR(50) NOT NULL
);

-- 4. Inventario

CREATE TABLE inventario (
    id_inventario INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    tipo_de_movimiento ENUM('entrada', 'salida') NOT NULL,
    fecha DATE NOT NULL,
    responsable VARCHAR(100),
    cantidad_total INT NOT NULL,

    CONSTRAINT fk_id_producto_inventario
        FOREIGN KEY (id_producto)
        REFERENCES producto(id_producto)
);


-- 5. Venta

CREATE TABLE venta (
    id_venta INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_pla INT NOT NULL,
    precio_total DECIMAL(10, 2) NOT NULL,
    cantidad INT NOT NULL,

    FOREIGN KEY (id_pla) REFERENCES platillo(id_pla)
);




-- 6. Reserva

CREATE TABLE reserva(
    id_reserva INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    estado_reserva VARCHAR(30) NOT NULL DEFAULT 'Pendiente',
    fecha_reserva DATETIME NOT NULL,
    responsable VARCHAR (100) NOT NULL,
    cliente VARCHAR (100) NOT NULL,
    FOREIGN KEY (cliente) REFERENCES usuario(correo)
);


-- 7. Factura

CREATE TABLE factura (
    id_factura INT NOT NULL PRIMARY KEY AUTO_INCREMENT, -- Clave primaria única para cada factura
    id_venta INT NOT NULL, -- Llama cantidad, precio_total
    id_Hventa INT NULL, -- Clave foránea llama tabla fecha'
    id_pla INT NOT NULL, -- Clave foránea llama id, nombre, precio, 
    id_pago INT NOT NULL, --llama método de pago


    total_factura_ConImpuestos DECIMAL(10, 2) NOT NULL, -- Monto total de la factura con impuestos
    responsable VARCHAR(100),


    -- Claves foráneas
    CONSTRAINT fk_factura_venta
        FOREIGN KEY (id_Hventa) REFERENCES venta(id_venta),
    CONSTRAINT fk_factura_platillo
        FOREIGN KEY (id_pla) REFERENCES platillo(id_pla),
    CONSTRAINT fk_factura_inventario
        FOREIGN KEY (id_inventario) REFERENCES inventario(id_inventario)
);


-- 8. Historial de Venta

CREATE TABLE Historial_venta (
    id_Hventa INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_factura INT NOT NULL,
    fecha DATE NOT NULL,
    -- La columna 'precio total' o 'total_venta' no se incluye aquí,
    -- ya que se obtendría de la tabla 'venta' a través de 'id_venta'.
    id_usuario INT NOT NULL, -- ID del empleado que realizó la venta (referencia a la tabla 'usuario')

    -- Definición de claves foráneas
    CONSTRAINT fk_historial_factura -- Nueva clave foránea para relacionar con la tabla 'venta'
        FOREIGN KEY (id_factura) REFERENCES factura(id_factura),
    CONSTRAINT fk_historial_venta_usuario -- Nombre del CONSTRAINT actualizado para mayor claridad
        FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);



-- 9. Pago (puede depender de venta o factura)

CREATE TABLE Comprobante_pago(
    id_pago INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_venta INT NULL,
    id_factura INT NULL,
    id_Hventa INT NOT NULL,
    metodo_pago VARCHAR(50) NOT NULL,
    monto_pago DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY (id_venta) REFERENCES venta(id_venta)
);



-- Procedure-----------------------------

-- USUARIO

-- obtener usuario

DELIMITER //

CREATE PROCEDURE obtener_usuario(IN e_correo varchar(100))
BEGIN
    SELECT * FROM usuario WHERE correo = e_correo;
END //

-- obtener documento

DELIMITER //

CREATE PROCEDURE obtener_documento(IN u_docu INT)
BEGIN
    SELECT * FROM usuario WHERE documento = u_docu;
END //

-- insertar usuario

DELIMITER //
CREATE PROCEDURE insertar_usuario(IN e_id_rol VARCHAR(50), IN e_nombre VARCHAR(100), IN e_apellido VARCHAR(100), IN e_email VARCHAR(100), IN e_contraseña VARCHAR(100), IN e_telefono VARCHAR(100), IN e_documento int, IN e_token VARCHAR(100), IN e_date datetime)
BEGIN
    INSERT INTO usuario(id_rol, nombres, apellidos, correo, contraseña, telefono, documento, reset_token, reset_token_expires_at) VALUES(e_id_rol, e_nombre, e_apellido, e_email, e_contraseña, e_telefono, e_documento, e_token, e_date);
END //

-- actualizar usuario

DELIMITER //
CREATE PROCEDURE actualizar_usuario(IN e_id int, IN e_id_rol VARCHAR (50), IN e_nombre VARCHAR(100), IN e_apellido VARCHAR(100), IN e_email VARCHAR(100), IN e_telefono VARCHAR(100), IN e_documento int, IN e_token VARCHAR(100), IN e_date datetime)
BEGIN
    UPDATE usuario SET id_rol = e_id_rol, nombres = e_nombre, apellidos = e_apellido, correo = e_email, telefono = e_telefono, documento = e_documento, reset_token = e_token, reset_token_expires_at = e_date WHERE id_usuario = e_id;
END //

-- eliminar empleado

DELIMITER //

CREATE PROCEDURE eliminar_usuario (IN e_id INT)
BEGIN

        DELETE FROM usuario WHERE id_usuario = e_id;

END //


-- PRODUCTO

-- obtener producto

DELIMITER //

CREATE PROCEDURE obtener_producto(IN p_nombre VARCHAR (100))
BEGIN
    SELECT * FROM producto WHERE nombre = p_nombre;
END //

-- insertar producto

DELIMITER //
CREATE PROCEDURE insertar_producto(IN p_nombre VARCHAR(100), IN p_categoria VARCHAR(50), IN p_imagen VARCHAR(100), IN p_precio DECIMAL(10,2), IN p_usuario INT)
BEGIN
    INSERT INTO producto(nombre, categoria, imagen, precio_unitario, id_usuario) VALUES(p_nombre, p_categoria, p_imagen, p_precio, p_usuario);
END //

-- actualizar producto

DELIMITER //
CREATE PROCEDURE actualizar_producto(IN p_id INT, IN p_nombre VARCHAR(100), IN p_categoria VARCHAR(50), IN p_imagen VARCHAR(100), IN p_precio DECIMAL(10,2))
BEGIN
    UPDATE producto SET categoria = p_categoria, nombre = p_nombre, imagen = p_imagen, precio_unitario = p_precio WHERE id_producto = p_id;
END //

-- eliminar producto

DELIMITER //

CREATE PROCEDURE eliminar_producto (IN p_id INT)
BEGIN

        DELETE FROM producto WHERE id_producto = p_id;

END //


-- RESERVA

-- obtener reserva

DELIMITER //

CREATE PROCEDURE obtener_reserva(IN r_date date)
BEGIN
    SELECT * FROM reserva WHERE fecha_reserva = r_date;
END //

-- insertar reserva

DELIMITER //
CREATE PROCEDURE insertar_reserva(IN r_estado VARCHAR(100), IN r_date DATETIME, IN r_rol VARCHAR(50), IN r_nombre VARCHAR(50), IN r_apellido VARCHAR(50), IN r_correo VARCHAR(100), IN r_usuario VARCHAR(100))
BEGIN
    INSERT INTO usuario(id_rol, nombres, apellidos, correo, contraseña, telefono, documento, reset_token, reset_token_expires_at) VALUES(r_rol, r_nombre, r_apellido, r_correo, "a", "a", "a", null, null);
    INSERT INTO reserva(estado_reserva, fecha_reserva, responsable, cliente) VALUES(r_estado, r_date, r_usuario, r_correo);
END //

-- actualizar reserva

DELIMITER //
CREATE PROCEDURE actualizar_reserva(IN r_id INT, IN r_estado VARCHAR(100), IN r_date DATETIME)
BEGIN
    UPDATE reserva SET fecha_reserva = r_date, estado_reserva = r_estado WHERE id_reserva = r_id;
END //

-- eliminar reserva

DELIMITER //

CREATE PROCEDURE eliminar_reserva (IN r_id INT, IN r_cliente VARCHAR(100))
BEGIN

        DELETE FROM reserva WHERE id_reserva = r_id;
DELETE FROM usuario WHERE correo = r_cliente;

END //



-- PROCEDIMIENTOS PARA LA TABLA INVENTARIO

DELIMITER //

CREATE PROCEDURE sumar_inventario(IN i_producto INT)
BEGIN
    SELECT SUM (i_producto) FROM inventario;
END //


-- inventario

DELIMITER //

CREATE PROCEDURE obtener_inventario(IN i_producto INT)
BEGIN
    SELECT * FROM inventario WHERE id_producto = i_producto;
END //



DELIMITER //

-- INSERTAR INVENTARIO
DELIMITER //
CREATE PROCEDURE insertar_inventario (
    IN i_id_producto INT,
    IN i_cantidad INT,
    IN i_tipo_de_movimiento ENUM('entrada', 'salida'),
    IN i_fecha DATE,
    IN i_responsable VARCHAR(100),
    IN i_cantidad_total INT
)
BEGIN
    INSERT INTO inventario (id_producto, cantidad, tipo_de_movimiento, fecha, responsable, cantidad_total)
    VALUES (i_id_producto, i_cantidad, i_tipo_de_movimiento, i_fecha, i_responsable, i_cantidad_total);
END //
DELIMITER ;

-- ACTUALIZAR INVENTARIO

DELIMITER //

CREATE PROCEDURE actualizar_inventario (
    IN i_id_inventario INT,
    IN i_cantidad_total INT
)
BEGIN
    UPDATE inventario
    SET
        cantidad_total = i_cantidad_total
    WHERE id_inventario = i_id_inventario;
END //


-- ELIMINAR INVENTARIO
DELIMITER //
CREATE PROCEDURE eliminar_inventario (IN p_id_inventario INT)
BEGIN
    DELETE FROM inventario WHERE id_inventario = p_id_inventario;
END //
DELIMITER ;











-- PROCEDIMIENTOS PARA LA TABLA PLATILLO

-- OBTENER PLATILLO
-- Este procedimiento permite obtener un registro de platillo por su ID.
DELIMITER //

CREATE PROCEDURE obtener_platillo(IN p_id_pla INT)
BEGIN
    SELECT * FROM platillo WHERE id_pla = p_id_pla;
END //
DELIMITER ;

-- INSERTAR PLATILLO
-- Este procedimiento inserta un nuevo registro en la tabla platillo.
DELIMITER //
CREATE PROCEDURE insertar_platillo(
    IN p_nombre VARCHAR(50),
    IN p_descripcion VARCHAR(500),
    IN p_precio DECIMAL(10,2),
    IN p_pla_categoria VARCHAR(50)
)
BEGIN
    INSERT INTO platillo(nombre, descripcion, precio, pla_categoria)
    VALUES(p_nombre, p_descripcion, p_precio, p_pla_categoria);
END //
DELIMITER ;

-- ACTUALIZAR PLATILLO
-- Este procedimiento actualiza un registro existente en la tabla platillo por su ID.
DELIMITER //
CREATE PROCEDURE actualizar_platillo(
    IN p_id_pla INT,
    IN p_nombre VARCHAR(50),
    IN p_descripcion VARCHAR(500),
    IN p_precio DECIMAL(10,2),
    IN p_pla_categoria VARCHAR(50)
)
BEGIN
    UPDATE platillo
    SET
        nombre = p_nombre,
        descripcion = p_descripcion,
        precio = p_precio,
        pla_categoria = p_pla_categoria
    WHERE id_pla = p_id_pla;
END //
DELIMITER ;

-- ELIMINAR PLATILLO
-- Este procedimiento elimina un registro de la tabla platillo por su ID.
DELIMITER //

CREATE PROCEDURE eliminar_platillo (IN p_id_pla INT)
BEGIN
    DELETE FROM platillo WHERE id_pla = p_id_pla;
END //

DELIMITER ;



-- VENTA


-- PROCEDURE: registrar_venta
-- FUNCION: Inserta una nueva venta en la tabla 'venta'
--          Calcula automáticamente el precio_total con base en el precio del platillo


DELIMITER $$

CREATE PROCEDURE registrar_venta(
    IN p_id_pla INT,
    IN p_cantidad INT,
    IN p_precio_total DECIMAL(10,2)
)
BEGIN
    -- Insertar la venta en la tabla
    INSERT INTO venta (id_pla, cantidad, precio_total)
    VALUES (p_id_pla, p_cantidad, p_precio_total);
END$$

DELIMITER ;


-- PROCEDURE: obtener_ventas
-- FUNCION: Recupera todas las ventas con los nombres de los platillos


CREATE PROCEDURE obtener_ventas()
BEGIN
    SELECT 
        v.id_venta,
        v.id_pla,
        p.nombre AS nombre_platillo,
        v.cantidad,
        v.precio_total
    FROM venta v
    INNER JOIN platillo p ON v.id_pla = p.id_pla
    ORDER BY v.id_venta DESC;
END$$


-- PROCEDURE: eliminar_venta
-- FUNCION: Elimina una venta específica por su ID


CREATE PROCEDURE eliminar_venta(
    IN p_id_venta INT
)
BEGIN
    DELETE FROM venta
    WHERE id_venta = p_id_venta;
END$$
