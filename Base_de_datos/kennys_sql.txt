
-- 2. Tablas que dependen de las anteriores

CREATE TABLE usuario(
    id_usuario INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_rol VARCHAR(50) NOT NULL,
    nombres VARCHAR(50) NOT NULL,
    apellidos VARCHAR(50) NOT NULL,
    correo VARCHAR(100) NOT NULL UNIQUE,
    contrase単a VARCHAR(255) NOT NULL,
    telefono VARCHAR(20) NOT NULL,
    documento VARCHAR(30) NOT NULL UNIQUE,
    reset_token VARCHAR(255) NULL,
    reset_token_expires_at DATETIME NULL
);


CREATE TABLE producto(
    id_producto INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    categoria VARCHAR (50) NOT NULL,
    imagen VARCHAR(255) NOT NULL,
    precio_unitario DECIMAL(10, 2) NOT NULL
);

CREATE TABLE platillo(
    id_pla INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion VARCHAR(500) NOT NULL,
    precio DECIMAL(10, 2) NOT NULL,
    pla_categoria VARCHAR (50) NOT NULL
);

-- 3. Tablas transaccionales principales que dependen de empleados/productos

CREATE TABLE venta(
    id_venta INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    fecha DATE NOT NULL,
    total_venta DECIMAL(10, 2) NOT NULL
);


CREATE TABLE reserva(
    id_reserva INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    estado_reserva VARCHAR(30) NOT NULL DEFAULT 'Pendiente',
    fecha_reserva DATE NOT NULL
);


CREATE TABLE inventario(
    id_inventario INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    fecha DATE NOT NULL,
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);




-- 4. Tablas de detalle que dependen de transacciones principales y productos/platillos

CREATE TABLE venta_detalle(
    id_venta_detalle INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_venta INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario_venta DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_venta) REFERENCES venta(id_venta),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);


-- 5. Factura (depende de pedido y empleado)
CREATE TABLE factura(
    id_factura INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    fecha_factura DATE NOT NULL,
    total_factura DECIMAL(10, 2) NOT NULL
);

-- 6. Factura_detalle (depende de factura y producto)
CREATE TABLE factura_detalle(
    id_factura_detalle INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_factura INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario_factura DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_factura) REFERENCES factura(id_factura),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);

-- 7. Pago (puede depender de venta o factura)
CREATE TABLE pago(
    id_pago INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_venta INT NULL,
    id_factura INT NULL,
    metodo_pago VARCHAR(50) NOT NULL,
    monto_pago DECIMAL(10, 2) NOT NULL,
    fecha_pago DATETIME NOT NULL,
    FOREIGN KEY (id_venta) REFERENCES venta(id_venta),
    FOREIGN KEY (id_factura) REFERENCES factura(id_factura)
);

-- 8. Reserva_item (depende de reserva, producto y platillo)
CREATE TABLE reserva_item(
    id_reserva_item INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_reserva INT NOT NULL,
    id_producto INT NULL,
    id_platillo INT NULL,
    cantidad INT NOT NULL,
    FOREIGN KEY (id_reserva) REFERENCES reserva(id_reserva),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto),
    FOREIGN KEY (id_platillo) REFERENCES platillo(id_pla)
);

-- INSERTAR EN TABLAS -------------------

-- roles

INSERT INTO roles VALUES ("","Mesero"), ("","Cocinero"), ("","Limpieza")


-- Procedure-----------------------------

-- USUARIO

-- obtener usuario

DELIMITER //

CREATE PROCEDURE obtener_usuario(IN e_correo varchar(100))
BEGIN
    SELECT * FROM usuario WHERE correo = e_correo;
END //

-- insertar usuario

DELIMITER //
CREATE PROCEDURE insertar_usuario(IN e_id_rol VARCHAR(50), IN e_nombre VARCHAR(100), IN e_apellido VARCHAR(100), IN e_email VARCHAR(100), IN e_contrase単a VARCHAR(100), IN e_telefono VARCHAR(100), IN e_documento int, IN e_token VARCHAR(100), IN e_date datetime)
BEGIN
    INSERT INTO usuario(id_rol, nombres, apellidos, correo, contrase単a, telefono, documento, reset_token, reset_token_expires_at) VALUES(e_id_rol, e_nombre, e_apellido, e_email, e_contrase単a, e_telefono, e_documento, e_token, e_date);
END //

-- actualizar usuario

DELIMITER //
CREATE PROCEDURE actualizar_usuario(IN e_id int, IN e_id_rol VARCHAR (50), IN e_nombre VARCHAR(100), IN e_apellido VARCHAR(100), IN e_email VARCHAR(100), IN e_telefono VARCHAR(100), IN e_documento int, IN e_token VARCHAR(100), IN e_date datetime)
BEGIN
    UPDATE usuario SET id_rol = e_id_rol, nombres = e_nombre, apellidos = e_apellido, correo = e_email, telefono = e_telefono, documento = e_documento, reset_token = e_token, reset_token_expires_at = e_date WHERE id_usuario = e_id;
END //

-- eliminar empleado

DELIMITER //

CREATE PROCEDURE eliminar_usuario (IN e_id INT)
BEGIN

        DELETE FROM usuario WHERE id_usuario = e_id;

END //

-- PRODUCTO

-- obtener producto

DELIMITER //

CREATE PROCEDURE obtener_producto(IN p_id INT)
BEGIN
    SELECT * FROM producto WHERE id_producto = p_id;
END //

-- insertar producto

DELIMITER //
CREATE PROCEDURE insertar_producto(IN p_nombre VARCHAR(100), IN p_categoria VARCHAR(50), IN p_imagen VARCHAR(100), IN p_precio DECIMAL(10,2))
BEGIN
    INSERT INTO producto(nombre, categoria, imagen, precio_unitario) VALUES(p_nombre, p_categoria, p_imagen, p_precio);
END //

-- actualizar producto

DELIMITER //
CREATE PROCEDURE actualizar_producto(IN p_id INT, IN p_nombre VARCHAR(100), IN p_categoria VARCHAR(50), IN p_imagen VARCHAR(100), IN p_precio DECIMAL(10,2))
BEGIN
    UPDATE producto SET categoria = p_categoria, nombre = p_nombre, imagen = p_imagen, precio_unitario = p_precio WHERE id_producto = p_id;
END //

-- eliminar producto

DELIMITER //

CREATE PROCEDURE eliminar_usuario (IN e_id INT)
BEGIN

        DELETE FROM producto WHERE id_usuario = e_id;

END //